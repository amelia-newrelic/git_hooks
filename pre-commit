#!/usr/bin/env ruby

class PreCommitHandler

  attr_accessor :file_errors

  def initialize
    @file_errors = []
  end

  def handle
    reject if code_contains_bindings?
  end

  private 

  def code_contains_bindings? 
    commiting_files.each do |file|
      if FileAnalyzer.contains_binding?(file)
        file_errors << "File #{file} contains #{FileAnalyzer.file_types[file.split(".").last.to_sym][:binding].join(" or ")}"
      end
    end
    file_errors.count > 0
  end

  def commiting_files
    %x{git diff --name-only --cached}.split("\n")
  end

  def reject
    messages = ["Your attempt to COMMIT was rejected" ]
    messages << nil
    messages << file_errors
    messages << nil
    messages << "If you still want to commit then you need to ignore the pre_commit git hook by executing following command."
    messages << "git commit --no-verify OR git commit -n"
    feedback messages
  end

  def feedback(messages)
    puts "*"*40
    [messages].flatten.each do |message|
      puts message
    end
    puts "*"*40

    exit 1
  end

  class FileAnalyzer
    def self.contains_binding?(file) 
      return false unless File.file? file
      extension = file.split(".").last
      return false if extension.nil? || !(file_types.keys.include? extension.to_sym)

      file_types[extension.to_sym][:binding].each do |binding|
        return true if open(file).grep(/#{binding}/).count > 0
      end
      false
    end

    def self.file_types
      {
        rb: {
          binding: ["binding.pry", "debugger"],
          comment: ["#"]
        },
        js: {
          binding: ["debugger"],
          comment: "//"
        },
        coffee: {
          binding: ["debugger"],
          comment: "#"
        }
      }
    end
  end
end

PreCommitHandler.new.handle
